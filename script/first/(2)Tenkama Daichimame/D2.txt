#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Normal: Searing Sign: Crecent moon slicing sunshine (NORMAL)"]
#Text["Stone slicing steel, the pure art of harvesting the earth"] 
//#BGM["./Music.ogg"]

#include"script/default_system/Default_ShotConst.txt"
#include "script/default_system/Default_Effect.txt"


let objBoss;
let count = -110;
let objScene= GetEnemyBossSceneObjectID();

let imgBoss = GetCurrentScriptDirectory ~ "textures/Tenkama.png";
let sakura = GetCurrentScriptDirectory ~ "textures/wheat.jpg";
let overlay = GetCurrentScriptDirectory ~ "textures/harvest.png";
let animFrame = 0;
let animFrame2= 0;

let bbgmusic = GetCurrentScriptDirectory ~ "bgm/Tenkama.mp3";

let spellcardSFX = GetCurrentScriptDirectory ~ "sfx/SPELLCARD.wav";
let bossdeathSFX = GetCurrentScriptDirectory ~ "sfx/DEFEATED.wav";
let attacksfx1 = GetCurrentScriptDirectory ~ "sfx/ATTACK4.wav";
let attacksfx2 = GetCurrentScriptDirectory ~ "sfx/TWINKLE.wav";

let objlasers = [];


@Event{
    alternative(GetEventType())
    case(EV_REQUEST_LIFE){
        SetScriptResult(8000);
        }
    case(EV_REQUEST_TIMER){
        SetScriptResult(60);
    }
    case(EV_REQUEST_SPELL_SCORE){
        SetScriptResult(1000000);
    }
}

@Initialize{
    objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
    ObjMove_SetDestAtFrame(objBoss,GetCenterX,60 ,60);

    ObjEnemyBossScene_StartSpell(objScene);


    TDrawLoop;
    LoadSound(bbgmusic);

    LoadSound(spellcardSFX);
    LoadSound(bossdeathSFX);
    LoadSound(attacksfx1);
    LoadSound(attacksfx2);



    LoadSound(bbgmusic);

    PlayBGM(bbgmusic,10,145);
    renderBG;
    renderBoss;

    TFinalize;


}

task TDrawLoop{
    let imgBoss = GetCurrentScriptDirectory ~ "image.png";
    ObjPrim_SetTexture(objBoss, imgBoss);
    ObjSprite2D_SetSourceRect(objBoss,64,1,127,64);
    ObjSprite2D_SetDestCenter(objBoss);
}

task renderBG{
    
    let scrollTex = 0;
    
    //backround
    let objback = ObjPrim_Create(OBJ_SPRITE_2D);
    Obj_SetRenderPriorityI(objback,20);
    ObjPrim_SetTexture(objback,sakura);
    ObjSprite2D_SetSourceRect(objback,0,0,450,334);
    ObjSprite2D_SetDestRect(objback,0,0,GetStgFrameWidth,GetStgFrameHeight);
    
    //Spell card overlay texture
    let overlayObj = ObjPrim_Create(OBJ_SPRITE_2D);
    Obj_SetRenderPriorityI(overlayObj,21);
    ObjPrim_SetTexture(overlayObj,overlay);
    ObjRender_SetBlendType(overlayObj, BLEND_ADD_ARGB);     // blend type ADDITIVE with Alpha ability and RGB colours
    ObjRender_SetAlpha(overlayObj,100);                     // Set ALPHA value to make it transparent
    ObjSprite2D_SetSourceRect(overlayObj,0,0,520,520);
    ObjSprite2D_SetDestRect(overlayObj,0,0,GetStgFrameWidth,GetStgFrameHeight);
    
    //As long as the boss is alive, scroll the overlay diagonally from topleft to bottomright
    while(!Obj_IsDeleted(objBoss)) {
        ObjSprite2D_SetSourceRect(overlayObj,0-scrollTex,0-scrollTex,512-scrollTex,512-scrollTex);
        scrollTex += 1;
        yield;
    }
    Obj_Delete(overlayObj);
    
}

task renderBoss{
    let dir;
    let speed;
    
    //texture the boss, set centre as true centre
    ObjPrim_SetTexture(objBoss,imgBoss);
    ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);
    ObjSprite2D_SetDestCenter(objBoss);
    ObjRender_SetScaleXYZ(objBoss,1.5,1.5,0);
    
    while(!Obj_IsDeleted(objBoss)){
        
        // update boss speed and dir locally
        dir= ObjMove_GetAngle(objBoss);
        speed= ObjMove_GetSpeed(objBoss);
        
        
        //animation handling
        if (speed==0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        else if (cos(dir) < 0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        else if (cos(dir) > 0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        animFrame++;
        animFrame2+=1;
        if(animFrame > 45) { animFrame = 0; }
        yield;
    }
    
}


@MainLoop{
    ObjEnemy_SetIntersectionCircleToShot(objBoss,ObjMove_GetX(objBoss) ,ObjMove_GetY(objBoss) ,32 );
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss,ObjMove_GetX(objBoss) ,ObjMove_GetY(objBoss) ,24 );
    SetShotAutoDeleteClip(200,200,200,64);

    if(count==-1){movement;}
    if (count%3==0){fire;}
    if (count%3==0){fire2;}

    if (count%400==0){circle;}
    
    if (count%400==0){Invert;}
    if (count%402==0){Invert;}
    if (count%404==0){Invert;}
    if (count%406==0){Invert;}

   

    

    
    
    count++;
    yield;
}

let frame = 400;
let shooting1=280;
let shooting2=100;

task fire{
    let angleS = GetAngleToPlayer(objBoss);


    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}
    loop(1){
        PlaySE(attacksfx1);
        let obj= CreateShotA2(rand_int(shooting1,380),ObjMove_GetY(objBoss)-70,2,angleS,0.01,2,128,30);
        shooting1 -=1;

        if (shooting1 <= 150){ 
        shooting1= 380;
        yield;}
    yield;    
    }
    
}

task fire2{
    let angleS = GetAngleToPlayer(objBoss);


    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}
    loop(1){
        PlaySE(attacksfx1);
        let obj= CreateShotA2(rand_int(0,shooting2),ObjMove_GetY(objBoss)-70,2,angleS,0.01,2,128,30);
        shooting2 +=1;
        if (shooting2 >= 230){ 
            shooting2= 0;
        yield;}
    
    yield;    
    }
    
}




let angleS= 0;
let angleF= 0;
let colorbullet = 50;
let colorblue = 70;


task circle{
    let angleP = GetAngleToPlayer(objBoss);      
    let angleT= rand_int(0,360);
    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}
    loop(10){
        
        PlaySE(attacksfx1);
        let obj2 = CreateCurveLaserA1(ObjMove_GetX(objBoss)+1*cos(angleT*1),ObjMove_GetY(objBoss)+1*sin(angleT*1),4,angleP,120,20,5,0);

        ObjMove_AddPatternA2(obj2, 0,1,NO_CHANGE,0.1,-5.5,15);
        ObjMove_AddPatternA2(obj2, 160,0.1,NO_CHANGE,0.5,-3.7,9);
        //ObjMove_AddPatternA2(obj2, 280,1,NO_CHANGE,-1.5,-6.7,9);
        //ObjMove_AddPatternA4(obj2, 330,1,100,0.3,-2.5,7,GetPlayerObjectID(),102);
        ObjMove_AddPatternA2(obj2, 240,0.5,NO_CHANGE,0,0,9);

        BulletCommands(obj2);


        wait(0);

        angleS+=360/302;
        angleP+=3;

    angleS+=2;
    angleF-=2;

    yield;    
    }
   
    


  
}

task Invert{
    let invert = GetCurrentScriptDirectory~"./textures/inv_circle.png";
    let objInv = ObjPrim_Create(OBJ_SPRITE_2D);
    let objcount = 0;

        ObjPrim_SetTexture(objInv, invert);
        ObjSprite2D_SetSourceRect(objInv, 0, 0, 500, 500);
        ObjSprite2D_SetDestCenter(objInv);
        ObjRender_SetScaleXYZ(objInv, 0.25, 0.25, 1);
        ObjRender_SetPosition(objInv, 384/2, (448/2-190), 1);
        ObjRender_SetBlendType(objInv, BLEND_INV_DESTRGB);
      
        while(ObjEnemy_GetInfo(objBoss,INFO_LIFE)>0){
            ObjRender_SetScaleXYZ(objInv, objcount*0.05, objcount*0.05, 1);
            objcount+=1;
            yield;
        }
        Obj_Delete(objInv);
    yield;
        
}



task BulletCommands(obj){
    while(ObjMove_GetSpeed(obj)==100){yield;}
    wait(320);
    let angleT = rand(0,360);
    

    loop(30){
        let objstar = CreateShotA2(ObjMove_GetX(obj)-50, ObjMove_GetY(obj)-70, 5,angleT,-0.4,0.8,45,30);
        angleT+=360/21;

    yield;
    }
    Obj_Delete(obj);
}


task movement{
    while(ObjEnemy_GetInfo(objBoss,INFO_LIFE)>0){
        ObjMove_SetDestAtFrame(objBoss,(GetCenterX), (GetCenterY-160), 60);
            wait(240);
      
    yield;   
    }
 }




task TFinalize {
        while(ObjEnemy_GetInfo(objBoss,INFO_LIFE)>0){yield;}
        if(ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT)
                +ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0){
            AddScore(ObjEnemyBossScene_GetInfo(objScene,INFO_SPELL_SCORE));
            }
        Obj_Delete(objBoss);
        PlaySE(bossdeathSFX);
        TExplosionA(ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),10,0.5);
        DeleteShotAll(TYPE_ALL,TYPE_ITEM);
        SetAutoDeleteObject(true);
        wait(150);
        CloseScript(GetOwnScriptID());  
        return;
    }
function GetCenterX{
     return GetStgFrameWidth/2;
 }
function GetCenterY{
     return GetStgFrameHeight/2;
 }

function wait(n){
    loop(n){yield;}
 }

function rand_int(min, max){
  return round(rand(min, max))
}
