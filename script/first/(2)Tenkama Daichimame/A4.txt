#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Lunatic:Searing Sign: Always a diamond shearing air(LUNATIC)"]
#Text["Diamond shearing air, the soothing sound of the earth in love with itself"] 
//#BGM["./Music.ogg"]

#include"script/default_system/Default_ShotConst.txt"
#include "script/default_system/Default_Effect.txt"


let objBoss;
let count = -110;
let objScene= GetEnemyBossSceneObjectID();

let imgBoss = GetCurrentScriptDirectory ~ "textures/Tenkama.png";
let sakura = GetCurrentScriptDirectory ~ "textures/wheat.jpg";
let overlay = GetCurrentScriptDirectory ~ "textures/harvest.png";
let animFrame = 0;
let animFrame2= 0;

let bbgmusic = GetCurrentScriptDirectory ~ "bgm/Tenkama.mp3";

let spellcardSFX = GetCurrentScriptDirectory ~ "sfx/SPELLCARD.wav";
let bossdeathSFX = GetCurrentScriptDirectory ~ "sfx/DEFEATED.wav";
let attacksfx1 = GetCurrentScriptDirectory ~ "sfx/ATTACK4.wav";
let attacksfx2 = GetCurrentScriptDirectory ~ "sfx/TWINKLE.wav";

let objlasers = [];


@Event{
    alternative(GetEventType())
    case(EV_REQUEST_LIFE){
        SetScriptResult(4000);
        }
    case(EV_REQUEST_TIMER){
        SetScriptResult(60);
    }
    case(EV_REQUEST_SPELL_SCORE){
        SetScriptResult(1000000);
    }
}

@Initialize{
    objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
    ObjMove_SetDestAtFrame(objBoss,GetCenterX,60 ,60);

    ObjEnemyBossScene_StartSpell(objScene);


    TDrawLoop;
    LoadSound(bbgmusic);

    LoadSound(spellcardSFX);
    LoadSound(bossdeathSFX);
    LoadSound(attacksfx1);
    LoadSound(attacksfx2);



    LoadSound(bbgmusic);

    PlayBGM(bbgmusic,10,145);
    renderBG;
    renderBoss;

    TFinalize;


}

task TDrawLoop{
    let imgBoss = GetCurrentScriptDirectory ~ "image.png";
    ObjPrim_SetTexture(objBoss, imgBoss);
    ObjSprite2D_SetSourceRect(objBoss,64,1,127,64);
    ObjSprite2D_SetDestCenter(objBoss);
}

task renderBG{
    
    let scrollTex = 0;
    
    //backround
    let objback = ObjPrim_Create(OBJ_SPRITE_2D);
    Obj_SetRenderPriorityI(objback,20);
    ObjPrim_SetTexture(objback,sakura);
    ObjSprite2D_SetSourceRect(objback,0,0,450,334);
    ObjSprite2D_SetDestRect(objback,0,0,GetStgFrameWidth,GetStgFrameHeight);
    
    //Spell card overlay texture
    let overlayObj = ObjPrim_Create(OBJ_SPRITE_2D);
    Obj_SetRenderPriorityI(overlayObj,21);
    ObjPrim_SetTexture(overlayObj,overlay);
    ObjRender_SetBlendType(overlayObj, BLEND_ADD_ARGB);     // blend type ADDITIVE with Alpha ability and RGB colours
    ObjRender_SetAlpha(overlayObj,100);                     // Set ALPHA value to make it transparent
    ObjSprite2D_SetSourceRect(overlayObj,0,0,520,520);
    ObjSprite2D_SetDestRect(overlayObj,0,0,GetStgFrameWidth,GetStgFrameHeight);
    
    //As long as the boss is alive, scroll the overlay diagonally from topleft to bottomright
    while(!Obj_IsDeleted(objBoss)) {
        ObjSprite2D_SetSourceRect(overlayObj,0-scrollTex,0-scrollTex,512-scrollTex,512-scrollTex);
        scrollTex += 1;
        yield;
    }
    Obj_Delete(overlayObj);
    
}

task renderBoss{
    let dir;
    let speed;
    
    //texture the boss, set centre as true centre
    ObjPrim_SetTexture(objBoss,imgBoss);
    ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);
    ObjSprite2D_SetDestCenter(objBoss);
    ObjRender_SetScaleXYZ(objBoss,1.5,1.5,0);
    
    while(!Obj_IsDeleted(objBoss)){
        
        // update boss speed and dir locally
        dir= ObjMove_GetAngle(objBoss);
        speed= ObjMove_GetSpeed(objBoss);
        
        
        //animation handling
        if (speed==0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        else if (cos(dir) < 0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        else if (cos(dir) > 0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        animFrame++;
        animFrame2+=1;
        if(animFrame > 45) { animFrame = 0; }
        yield;
    }
    
}


@MainLoop{
    ObjEnemy_SetIntersectionCircleToShot(objBoss,ObjMove_GetX(objBoss) ,ObjMove_GetY(objBoss) ,32 );
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss,ObjMove_GetX(objBoss) ,ObjMove_GetY(objBoss) ,24 );
    SetShotAutoDeleteClip(200,200,200,64);

    if(count==-1){movement;}
    if (count%120==0){fire;}
    if (count%30==0){fire2;}

    if (count%400==0){circle;}

   

    

    
    
    count++;
    yield;
}

let frame = 400;

task fire{
    let angleT = rand(0,360);
    let angleS = GetAngleToPlayer(objBoss);


    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}
    loop(10){
        PlaySE(attacksfx1);
        let obj= CreateShotA2((ObjMove_GetX(objBoss)+rand_int(-150,150)),ObjMove_GetY(objBoss),4,90,-0.3,2,125,30);
        wait(0);
    while(!Obj_IsDeleted(obj)){
    ascent(j in 0..length(objlasers)){
        if(IsIntersected_Obj_Obj(obj, objlasers[j])==true){ 

                PlaySE(attacksfx2);
                loop(1){
                    let obja = CreateShotA2(ObjMove_GetX(obj), ObjMove_GetY(obj), 10,angleS,0,-0.5,126,1);    Obj_Delete(obj);                
                    ObjMove_AddPatternA4(obja, 0,0,0,0,0,2,GetPlayerObjectID(),127);
                    ObjMove_AddPatternA4(obja, 100,9,0,-1,0,2,GetPlayerObjectID(),128);

                    angleT+=360/100;
               

    yield;
    }
            }
        }
    yield;
    }
    yield;    
    }
    
}


task fire2{
    let angleT = GetAngleToPlayer(objBoss);
    let angleS = GetAngleToPlayer(objBoss);


    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}
    loop(1){
        PlaySE(attacksfx1);
        let obj= CreateShotA2(ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),2,angleS,0.01,3,233,30);
        wait(0);
    while(!Obj_IsDeleted(obj)){
    ascent(j in 0..length(objlasers)){
        if(IsIntersected_Obj_Obj(obj, objlasers[j])==true){ 

                PlaySE(attacksfx2);
                loop(10){
                    let objb= CreateShotA2(ObjMove_GetX(obj), ObjMove_GetY(obj), 2,(angleT-(360/50)),0,0.01,234,1);    ObjShot_FadeDelete(obj);                
                    ObjMove_SetAngularVelocity(objb, rand_int(-0.7,0.7));

                    angleT+=360/10;
               

    yield;
    }
            }
        }
    yield;
    }
    yield;    
    }
    
}




let angleS= 0;
let angleF= 0;
let colorbullet = 50;
let colorblue = 70;


task circle{
    let angleP = GetAngleToPlayer(objBoss);      
    let angleT= rand_int(0,360);
    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}
    loop(6){
        
        PlaySE(attacksfx1);
        let obj2 = CreateCurveLaserA1(ObjMove_GetX(objBoss)+1*cos(angleT*1),ObjMove_GetY(objBoss)+1*sin(angleT*1),4,angleS,70,10,7,0);

        ObjMove_AddPatternA2(obj2, 0,1,NO_CHANGE,0.1,-5.5,15);
        ObjMove_AddPatternA2(obj2, 150,1,NO_CHANGE,0.05,-1.7,9);
        ObjMove_AddPatternA2(obj2, 190,1,90,0.05,0,9);
        ObjMove_AddPatternA4(obj2, 200,1,0,0.05,0,9,GetPlayerObjectID(),222);
       ;

        




        wait(0);

        angleS+=360/3;
        angleF-=360/12;
        objlasers = objlasers ~ [obj2];

    angleS+=2;
    angleF-=2;

    yield;    
    }
   
    


  
}



task movement{
    while(ObjEnemy_GetInfo(objBoss,INFO_LIFE)>0){
        ObjMove_SetDestAtFrame(objBoss,(GetCenterX), (GetCenterY-160), 60);
            wait(240);
      
    yield;   
    }
 }




task TFinalize {
        while(ObjEnemy_GetInfo(objBoss,INFO_LIFE)>0){yield;}
        if(ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT)
                +ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0){
            AddScore(ObjEnemyBossScene_GetInfo(objScene,INFO_SPELL_SCORE));
            }
        Obj_Delete(objBoss);
        PlaySE(bossdeathSFX);
        TExplosionA(ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),10,0.5);
        DeleteShotAll(TYPE_ALL,TYPE_ITEM);
        SetAutoDeleteObject(true);
        wait(150);
        CloseScript(GetOwnScriptID());  
        return;
    }
function GetCenterX{
     return GetStgFrameWidth/2;
 }
function GetCenterY{
     return GetStgFrameHeight/2;
 }

function wait(n){
    loop(n){yield;}
 }

function rand_int(min, max){
  return round(rand(min, max))
}
