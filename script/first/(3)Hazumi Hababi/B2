#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Normal: Pecesitos  (NORMAL)"]
#Text[""] 
//#BGM["./Music.ogg"]

#include"script/default_system/Default_ShotConst.txt"
#include "script/default_system/Default_Effect.txt"


let objBoss;
let count = -110;
let objScene= GetEnemyBossSceneObjectID();

let imgBoss = GetCurrentScriptDirectory ~ "textures/Hazumi.png";
let sakura = GetCurrentScriptDirectory ~ "textures/Matsuri.jpg";
let overlay = GetCurrentScriptDirectory ~ "textures/Fush.png";
let animFrame = 0;
let animFrame2= 0;

let bbgmusic = GetCurrentScriptDirectory ~ "bgm/Tenkama.mp3";

let spellcardSFX = GetCurrentScriptDirectory ~ "sfx/SPELLCARD.wav";
let bossdeathSFX = GetCurrentScriptDirectory ~ "sfx/DEFEATED.wav";
let attacksfx1 = GetCurrentScriptDirectory ~ "sfx/ATTACK4.wav";
let attacksfx2 = GetCurrentScriptDirectory ~ "sfx/TWINKLE.wav";

let objfish = [];


@Event{
    alternative(GetEventType())
    case(EV_REQUEST_LIFE){
        SetScriptResult(5000);
        }
    case(EV_REQUEST_TIMER){
        SetScriptResult(50);
    }
    case(EV_REQUEST_SPELL_SCORE){
        SetScriptResult(1000000);
    }
}

@Initialize{
    objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
    ObjMove_SetDestAtFrame(objBoss,GetCenterX,60 ,60);

    ObjEnemyBossScene_StartSpell(objScene);


    TDrawLoop;
    LoadSound(bbgmusic);

    LoadSound(spellcardSFX);
    LoadSound(bossdeathSFX);
    LoadSound(attacksfx1);
    LoadSound(attacksfx2);



    LoadSound(bbgmusic);

    PlayBGM(bbgmusic,10,145);
    renderBG;
    renderBoss;


    TFinalize;


}

task TDrawLoop{
    let imgBoss = GetCurrentScriptDirectory ~ "image.png";
    ObjPrim_SetTexture(objBoss, imgBoss);
    ObjSprite2D_SetSourceRect(objBoss,64,1,127,64);
    ObjSprite2D_SetDestCenter(objBoss);
}

task renderBG{
    
    let scrollTex = 0;
    
    //backround
    let objback = ObjPrim_Create(OBJ_SPRITE_2D);
    Obj_SetRenderPriorityI(objback,20);
    ObjPrim_SetTexture(objback,sakura);
    ObjSprite2D_SetSourceRect(objback,0,0,400,315);
    ObjSprite2D_SetDestRect(objback,0,0,GetStgFrameWidth,GetStgFrameHeight);
    
    //Spell card overlay texture
    let overlayObj = ObjPrim_Create(OBJ_SPRITE_2D);
    Obj_SetRenderPriorityI(overlayObj,21);
    ObjPrim_SetTexture(overlayObj,overlay);
    ObjRender_SetBlendType(overlayObj, BLEND_ADD_ARGB);     // blend type ADDITIVE with Alpha ability and RGB colours
    ObjRender_SetAlpha(overlayObj,100);                     // Set ALPHA value to make it transparent
    ObjSprite2D_SetSourceRect(overlayObj,0,0,1160,1300);
    ObjSprite2D_SetDestRect(overlayObj,0,0,GetStgFrameWidth,GetStgFrameHeight);
    
    //As long as the boss is alive, scroll the overlay diagonally from topleft to bottomright
    while(!Obj_IsDeleted(objBoss)) {
        ObjSprite2D_SetSourceRect(overlayObj,0-scrollTex,0-scrollTex,512-scrollTex,512-scrollTex);
        scrollTex += 1;
        yield;
    }
    Obj_Delete(overlayObj);
    
}

task renderBoss{
    let dir;
    let speed;
    
    //texture the boss, set centre as true centre
    ObjPrim_SetTexture(objBoss,imgBoss);
    ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);
    ObjSprite2D_SetDestCenter(objBoss);
    ObjRender_SetScaleXYZ(objBoss,1.5,1.5,0);
    
    while(!Obj_IsDeleted(objBoss)){
        
        // update boss speed and dir locally
        dir= ObjMove_GetAngle(objBoss);
        speed= ObjMove_GetSpeed(objBoss);
        
        
        //animation handling
        if (speed==0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        else if (cos(dir) < 0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        else if (cos(dir) > 0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        animFrame++;
        animFrame2+=1;
        if(animFrame > 20) { animFrame = 0; }
        yield;
    }
    
}


@MainLoop{
    ObjEnemy_SetIntersectionCircleToShot(objBoss,ObjMove_GetX(objBoss) ,ObjMove_GetY(objBoss) ,32 );
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss,ObjMove_GetX(objBoss) ,ObjMove_GetY(objBoss) ,24 );
    SetShotAutoDeleteClip(200,200,200,64);
    SetFogParam(250, 700, 0, 0, 0);

    if(count==-1){movement;}
   
    //if (count%(rand_int(300,500))==0){redes;}
    //if (count%(rand_int(300,500))==0){redes2;}
    if (count%300==0){redes2;}
    if (count%290==0){redes;}


    if (count%200==0){pecesitos;}

    if (count%200==0){pecesitos2;}

    if (count%1000==0){comida;}
    if (count%100==0){dispara;}


    
    //if (count%40==0){Invert;}
   



    

    
    
    count++;
    yield;
}

let frame = 400;
let shooting1=280;
let shooting2=100;

let angleS= 0;
let angleF= 0;
let colorbullet = 50;
let colorblue = 70;
let red = 0;

task dispara{
    let angleP = rand_int(0,360);
    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}
    loop(5){
    let obj2 = CreateShotA1(ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),1,angleP,82,60);
    
    angleP += 360/5.1
    }
    yield;
}


task redes{
    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}
    loop(50){
    let obj2 = CreateShotA1(0,red,0,0,8,60);
    ObjMove_SetSpeed(obj2,1.5);
    red += 10; 
    redesA(obj2);
    
    if (red > 450) {red=0} 
    }

    yield;  



}

task redesA(obj){;
 while(!Obj_IsDeleted(obj)){
        ascent(j in 0..length(objfish)){
            if(IsIntersected_Obj_Obj(obj, objfish[j])==true){ 

                    //ObjMove_SetSpeed(obj,3);
                    //ObjMove_SetAngle(obj,rand_int(0,360) );
                    Obj_Delete(obj)
            } 
        
        }                  
    yield;
    }
}

task redes2{
    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}
    loop(50){
    let obj2 = CreateShotA1(400,red,0,0,8,60);
    ObjMove_SetSpeed(obj2,-1.5);
    red += 10; 
    redesA(obj2);

    if (red > 450) {red=0} 
    }

    yield;    
}
   

task pecesitos{
    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}

    let obj2 = CreateShotA2(0, rand_int(100,350),0 ,0 ,0 ,0.5 ,rand_int(259,260) , 60);
    wait(60);
    ObjMove_SetSpeed(obj2,0.5);



    objfish = objfish ~ [obj2];

    while(!Obj_IsDeleted(obj2)){

        ObjMove_SetSpeed(obj2,8);        

        ObjMove_SetAcceleration(obj2,-0.5);
        ObjMove_SetAngle(obj2,rand_int(-25,25));

        wait(30);

        loop(1){
        //CreateShotA2(ObjMove_GetX(obj2),ObjMove_GetY(obj2) ,2 ,rand_int(180-45,180+45) ,-0.01 ,1,22,10 );
        yield;
        }

    yield;
    }



}

task pecesitos2{
    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}

    let obj2 = CreateShotA2(400, rand_int(100,350),1 ,180 ,0 ,0.5 ,rand_int(261,262) , 60);
    wait(60);
    ObjMove_SetSpeed(obj2,0.5);

    
    objfish = objfish ~ [obj2];

    while(!Obj_IsDeleted(obj2)){
        ObjMove_SetSpeed(obj2,8);    

        ObjMove_SetAcceleration(obj2,-0.5);
        ObjMove_SetAngle(obj2,rand_int(180-25,180+25));
        wait(30);

        loop(1){
            //CreateShotA2(ObjMove_GetX(obj2),ObjMove_GetY(obj2) ,2 ,rand_int(-45,45) ,-0.01 ,1,22,10 );
        yield;
        }
    yield;
    }    

}


task comida{
    let muerte= rand_int(150,400);

    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}
    
    let objfood = CreateShotA2(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss),0 ,90 ,0 ,1 ,71, 60);
    
    while(ObjMove_GetY(objfood) <= muerte){ObjMove_SetSpeed(objfood,1); yield;}
    
    avalanchadepeces(objfood,muerte);
}

task avalanchadepeces(obj,ang){

    while(ObjMove_GetY(obj) <= ang){return;}
    ObjMove_SetSpeed(obj,0);

    loop (10){
        let pez1= CreateShotA2(0, rand_int(10,450),0 ,0+(rand_int(-1,1)) ,0 ,1 ,rand_int(259,260) , 60);
        let pez2=CreateShotA2(400, rand_int(10,450),0 ,0+(rand_int(-1,1)) ,0 ,1 ,rand_int(261,262) , 60);
        ObjMove_AddPatternA4(pez1,0 ,0 ,NO_CHANGE ,0.09 ,0 ,7 ,obj ,NO_CHANGE );
        ObjMove_AddPatternA4(pez2,0 ,0 ,NO_CHANGE ,0.09 ,0 ,7 ,obj ,NO_CHANGE );
        //objfish=objfish~[pez1];
        //objfish=objfish~[pez2];
    yield;
    }
    wait(100);
    Obj_Delete(obj)


}

task movement{
    while(ObjEnemy_GetInfo(objBoss,INFO_LIFE)>0){
        ObjMove_SetDestAtFrame(objBoss,(GetCenterX), (GetCenterY-160), 60);
            wait(240);
      
    yield;   
    }
 }




task TFinalize {
        while(ObjEnemy_GetInfo(objBoss,INFO_LIFE)>0){yield;}
        if(ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT)
                +ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0){
            AddScore(ObjEnemyBossScene_GetInfo(objScene,INFO_SPELL_SCORE));
            }
        Obj_Delete(objBoss);
        PlaySE(bossdeathSFX);
        TExplosionA(ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),10,0.5);
        DeleteShotAll(TYPE_ALL,TYPE_ITEM);
        SetAutoDeleteObject(true);
        wait(150);
        CloseScript(GetOwnScriptID());  
        return;
    }
function GetCenterX{
     return GetStgFrameWidth/2;
 }
function GetCenterY{
     return GetStgFrameHeight/2;
 }

function wait(n){
    loop(n){yield;}
 }

function rand_int(min, max){
  return round(rand(min, max))
}
