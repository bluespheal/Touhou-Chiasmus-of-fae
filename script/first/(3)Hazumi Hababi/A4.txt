#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Lunatic:  (Lunatic)"]
#Text[""] 
//#BGM["./Music.ogg"]

#include"script/default_system/Default_ShotConst.txt"
#include "script/default_system/Default_Effect.txt"


let objBoss;
let count = -110;
let objScene= GetEnemyBossSceneObjectID();

let imgBoss = GetCurrentScriptDirectory ~ "textures/Hazumi.png";
let sakura = GetCurrentScriptDirectory ~ "textures/Matsuri.jpg";
let overlay = GetCurrentScriptDirectory ~ "textures/Fush.png";
let animFrame = 0;
let animFrame2= 0;

let bbgmusic = GetCurrentScriptDirectory ~ "bgm/Tenkama.mp3";

let spellcardSFX = GetCurrentScriptDirectory ~ "sfx/SPELLCARD.wav";
let bossdeathSFX = GetCurrentScriptDirectory ~ "sfx/DEFEATED.wav";
let attacksfx1 = GetCurrentScriptDirectory ~ "sfx/ATTACK4.wav";
let attacksfx2 = GetCurrentScriptDirectory ~ "sfx/TWINKLE.wav";

let objlasers = [];


@Event{
    alternative(GetEventType())
    case(EV_REQUEST_LIFE){
        SetScriptResult(6000);
        }
    case(EV_REQUEST_TIMER){
        SetScriptResult(60);
    }
    case(EV_REQUEST_SPELL_SCORE){
        SetScriptResult(1000000);
    }
}

@Initialize{
    objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
    ObjMove_SetDestAtFrame(objBoss,GetCenterX,60 ,60);

    ObjEnemyBossScene_StartSpell(objScene);


    TDrawLoop;
    LoadSound(bbgmusic);

    LoadSound(spellcardSFX);
    LoadSound(bossdeathSFX);
    LoadSound(attacksfx1);
    LoadSound(attacksfx2);



    LoadSound(bbgmusic);

    PlayBGM(bbgmusic,10,145);
    renderBG;
    renderBoss;


    TFinalize;


}

task TDrawLoop{
    let imgBoss = GetCurrentScriptDirectory ~ "image.png";
    ObjPrim_SetTexture(objBoss, imgBoss);
    ObjSprite2D_SetSourceRect(objBoss,64,1,127,64);
    ObjSprite2D_SetDestCenter(objBoss);
}

task renderBG{
    
    let scrollTex = 0;
    
    //backround
    let objback = ObjPrim_Create(OBJ_SPRITE_2D);
    Obj_SetRenderPriorityI(objback,20);
    ObjPrim_SetTexture(objback,sakura);
    ObjSprite2D_SetSourceRect(objback,0,0,400,315);
    ObjSprite2D_SetDestRect(objback,0,0,GetStgFrameWidth,GetStgFrameHeight);
    
    //Spell card overlay texture
    let overlayObj = ObjPrim_Create(OBJ_SPRITE_2D);
    Obj_SetRenderPriorityI(overlayObj,21);
    ObjPrim_SetTexture(overlayObj,overlay);
    ObjRender_SetBlendType(overlayObj, BLEND_ADD_ARGB);     // blend type ADDITIVE with Alpha ability and RGB colours
    ObjRender_SetAlpha(overlayObj,100);                     // Set ALPHA value to make it transparent
    ObjSprite2D_SetSourceRect(overlayObj,0,0,1160,1300);
    ObjSprite2D_SetDestRect(overlayObj,0,0,GetStgFrameWidth,GetStgFrameHeight);
    
    //As long as the boss is alive, scroll the overlay diagonally from topleft to bottomright
    while(!Obj_IsDeleted(objBoss)) {
        ObjSprite2D_SetSourceRect(overlayObj,0-scrollTex,0-scrollTex,512-scrollTex,512-scrollTex);
        scrollTex += 1;
        yield;
    }
    Obj_Delete(overlayObj);
    
}

task renderBoss{
    let dir;
    let speed;
    
    //texture the boss, set centre as true centre
    ObjPrim_SetTexture(objBoss,imgBoss);
    ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);
    ObjSprite2D_SetDestCenter(objBoss);
    ObjRender_SetScaleXYZ(objBoss,1.5,1.5,0);
    
    while(!Obj_IsDeleted(objBoss)){
        
        // update boss speed and dir locally
        dir= ObjMove_GetAngle(objBoss);
        speed= ObjMove_GetSpeed(objBoss);
        
        
        //animation handling
        if (speed==0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        else if (cos(dir) < 0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        else if (cos(dir) > 0) {
            ObjRender_SetAngleXYZ(objBoss,0,0,0);
            if(animFrame < 15) {ObjSprite2D_SetSourceRect(objBoss,0,0,64,64);} 
            if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(objBoss,64,0,128,64);}
            if(animFrame >= 30) {ObjSprite2D_SetSourceRect(objBoss,128,0,192,64);}
            animFrame2= 0;
        }   
        animFrame++;
        animFrame2+=1;
        if(animFrame > 20) { animFrame = 0; }
        yield;
    }
    
}


@MainLoop{
    ObjEnemy_SetIntersectionCircleToShot(objBoss,ObjMove_GetX(objBoss) ,ObjMove_GetY(objBoss) ,32 );
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss,ObjMove_GetX(objBoss) ,ObjMove_GetY(objBoss) ,24 );
    SetShotAutoDeleteClip(200,200,200,64);
    SetFogParam(250, 700, 0, 0, 0);

    if(count==-1){movement;}
   
    if (count%8==0){circle;}
    
    //if (count%40==0){Invert;}
   



    

    
    
    count++;
    yield;
}

let frame = 400;
let shooting1=280;
let shooting2=100;

let angleS= 0;
let angleF= 0;
let colorbullet = 50;
let colorblue = 70;
let fia=10;

task circle{
    if(ObjEnemy_GetInfo(objBoss,INFO_LIFE) <= 0){return;}
    let obj2 = CreateCurveLaserA1(fia,450,0,rand_int(253,257),32,10,rand(1, 7),90);
    
    fia += 80; 

    if (fia > 400){fia=10;}
    wait(90);
    ObjMove_SetSpeed(obj2,4);
   

        
    while(ObjMove_GetY(obj2)>100){
        ObjMove_SetAngularVelocity(obj2,10);
        wait(3);
        ObjMove_SetAngularVelocity(obj2,-10 );
        wait(2);
    yield;
    }

   
    BulletCommands(obj2);

   

    yield;    
}
   


task BulletCommands(obj){
    while(ObjMove_GetY(obj)>100){yield;}
    ObjMove_SetSpeed(obj,0);
    wait(30);
    let colorme = rand(241,248 );
    let colorme2 = rand(1,8 );
    let colorme3 = rand(225,232 );
    let colorme4 = rand(33,40 );


    

    let angleT = rand(0,360);

    loop(20){
       
        let obj2 = CreateShotA2(ObjMove_GetX(obj), ObjMove_GetY(obj), rand_int(0,15),angleT,-0.5,1,colorme, 0);
        let obj3 = CreateShotA2(ObjMove_GetX(obj), ObjMove_GetY(obj), rand_int(0,15),angleT,-0.5,1,colorme2, 0);
        let obj5 = CreateShotA2(ObjMove_GetX(obj), ObjMove_GetY(obj), 15,angleT,-0.5,1,colorme2, 1);

        let obj4 = CreateShotA2(ObjMove_GetX(obj), ObjMove_GetY(obj), rand_int(0,15),angleT,-0.5,1,colorme3, 0);
        //let obj5 = CreateShotA2(ObjMove_GetX(obj), ObjMove_GetY(obj), rand_int(0,15),angleT,-0.5,1,colorme4, 0);

        //ObjShot_SetDelay(obj2,60 );
        //ObjRender_SetAlpha(obj3,230);
        //ObjRender_SetBlendType(obj3,BLEND_ADD_ARGB);
        angleT+=360/20;
        BulletCommands2(obj2);
        BulletCommands2(obj4);
        //BulletCommands3(obj3);

        //BulletCommands2(obj5);

        //BulletCommands2(obj3);

    }

    wait(60);
    ObjShot_FadeDelete(obj);
}

task BulletCommands2(obj){
    //wait(rand_int(15,30));
    wait(30);
    //while(ObjMove_GetY(obj)>100){yield;}
    //ObjMove_SetSpeed(obj,1);
    //ObjMove_SetAngle(obj,90);

    ObjMove_AddPatternB2(obj,0 ,NO_CHANGE ,NO_CHANGE ,-NO_CHANGE,-0.1 ,0 ,0.5 );
    wait(rand_int(10,40));
    ObjShot_FadeDelete(obj);
}
task BulletCommands3(obj){
    //wait(rand_int(15,30));
    wait(30);
    //while(ObjMove_GetY(obj)>100){yield;}
    //ObjMove_SetSpeed(obj,1);
    //ObjMove_SetAngle(obj,90);

    ObjMove_AddPatternB2(obj,0 ,NO_CHANGE ,NO_CHANGE ,-NO_CHANGE,-0.1 ,0 ,2 );
    wait(rand_int(10,40));
}


task movement{
    while(ObjEnemy_GetInfo(objBoss,INFO_LIFE)>0){
        ObjMove_SetDestAtFrame(objBoss,(GetCenterX), (GetCenterY-160), 60);
            wait(240);
      
    yield;   
    }
 }




task TFinalize {
        while(ObjEnemy_GetInfo(objBoss,INFO_LIFE)>0){yield;}
        if(ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT)
                +ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0){
            AddScore(ObjEnemyBossScene_GetInfo(objScene,INFO_SPELL_SCORE));
            }
        Obj_Delete(objBoss);
        PlaySE(bossdeathSFX);
        TExplosionA(ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),10,0.5);
        DeleteShotAll(TYPE_ALL,TYPE_ITEM);
        SetAutoDeleteObject(true);
        wait(150);
        CloseScript(GetOwnScriptID());  
        return;
    }
function GetCenterX{
     return GetStgFrameWidth/2;
 }
function GetCenterY{
     return GetStgFrameHeight/2;
 }

function wait(n){
    loop(n){yield;}
 }

function rand_int(min, max){
  return round(rand(min, max))
}
