#TouhouDanmakufu [Single]
#ScriptVersion[3]
#Title["Chemistry Sign \"First Life Formula\" NORMAL"]
#Text["Some believe water [r]is the origin of all life,[r]so let's create some!"]

let bossObj;
let bossX = 0;
let bossY = 0;
let animFrame = 0;
let animFrame2= 0;

let imgBoss = GetCurrentScriptDirectory ~ "textures/quim.png";
let sakura = GetCurrentScriptDirectory ~ "textures/forest.png";
let overlay = GetCurrentScriptDirectory ~ "textures/chem.png";
let bbgmusic = GetCurrentScriptDirectory ~ "bgm/Chema.wav";

let spellcardSFX = GetCurrentScriptDirectory ~ "sfx/SPELLCARD.wav";
let bossdeathSFX = GetCurrentScriptDirectory ~ "sfx/DEFEATED.wav";

#include "script/default_system/Default_ShotConst.txt"
#include "script/default_system/Default_Effect.txt"


@Initialize{
	
	//Automatically delete objects when THIS script ends.
	SetAutoDeleteObject(true);
	
	let objScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_StartSpell(objScene);
	
	// define a boss in bossObj and register it	
	bossObj = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(bossObj);
	
	ObjMove_SetPosition(bossObj,192,-100);
	
	//move boss to desired x y location at desired speed
	ObjMove_SetDestAtSpeed(bossObj,192,120,5);

	//Load the sfx 
	LoadSound(spellcardSFX);
	LoadSound(bossdeathSFX);
	
	PlayBGM(bbgmusic,10,75);
	
	
	//play the sound
	PlaySE(spellcardSFX);
		
	mainTask; //run MainTask
}

@Event{
	//setting the boss timer and life
	alternative(GetEventType())
	case (EV_REQUEST_LIFE) {
		SetScriptResult(4000);
	}
	case (EV_REQUEST_TIMER) {
		SetScriptResult(60);
		
	}
	case(EV_REQUEST_SPELL_SCORE) {
		SetScriptResult(30000);
	}

}

@MainLoop{
	bossX= ObjMove_GetX(bossObj);
	bossY= ObjMove_GetY(bossObj);
	
	//collision for the shoots of the player
	ObjEnemy_SetIntersectionCircleToShot(bossObj,bossX,bossY,24);
	ObjEnemy_SetIntersectionCircleToPlayer(bossObj,bossX,bossY,32);
	yield; 

}

@Finalize{}

// my best friend, sorry Aleskey and Kevvvvvin
function wait(w) { loop(w) { yield; } } 



task mainTask{
	renderBoss;
	renderBG;
	movement;
	TEnd;
}

task renderBG{
	
	let scrollTex = 0;
	
	//backround
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj,20);
	ObjPrim_SetTexture(obj,sakura);
	ObjSprite2D_SetSourceRect(obj,0,0,450,334);
	ObjSprite2D_SetDestRect(obj,0,0,GetStgFrameWidth,GetStgFrameHeight);
	
	//Spell card overlay texture
	let overlayObj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(overlayObj,21);
	ObjPrim_SetTexture(overlayObj,overlay);
	ObjRender_SetBlendType(overlayObj, BLEND_ADD_ARGB);		// blend type ADDITIVE with Alpha ability and RGB colours
	ObjRender_SetAlpha(overlayObj,100);						// Set ALPHA value to make it transparent
	ObjSprite2D_SetSourceRect(overlayObj,0,0,512,512);
	ObjSprite2D_SetDestRect(overlayObj,0,0,GetStgFrameWidth,GetStgFrameHeight);
	
	//As long as the boss is alive, scroll the overlay diagonally from topleft to bottomright
	while(!Obj_IsDeleted(bossObj)) {
		ObjSprite2D_SetSourceRect(overlayObj,0-scrollTex,0-scrollTex,512-scrollTex,512-scrollTex);
		scrollTex += 1;
		yield;
	}
	Obj_Delete(overlayObj);
	
}

task renderBoss{
	let dir;
	let speed;
	
	//texture the boss, set centre as true centre
	ObjPrim_SetTexture(bossObj,imgBoss);
	ObjSprite2D_SetSourceRect(bossObj,0,0,64,64);
	ObjSprite2D_SetDestCenter(bossObj);
	ObjRender_SetScaleXYZ(bossObj,1.5,1.5,0);
	
	while(!Obj_IsDeleted(bossObj)){
		
		// update boss speed and dir locally
		dir= ObjMove_GetAngle(bossObj);
		speed= ObjMove_GetSpeed(bossObj);
		
		
		//animation handling
		if (speed==0) {
			ObjRender_SetAngleXYZ(bossObj,0,0,0);
			if(animFrame < 15) {ObjSprite2D_SetSourceRect(bossObj,0,0,64,64);} 
			if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(bossObj,64,0,128,64);}
			if(animFrame >= 30) {ObjSprite2D_SetSourceRect(bossObj,128,0,192,64);}
			animFrame2= 0;
		}	
		else if (cos(dir) < 0) {
			ObjRender_SetAngleXYZ(bossObj,0,0,0);
			if(animFrame < 15) {ObjSprite2D_SetSourceRect(bossObj,0,0,64,64);} 
			if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(bossObj,64,0,128,64);}
			if(animFrame >= 30) {ObjSprite2D_SetSourceRect(bossObj,128,0,192,64);}
			animFrame2= 0;
		}	
		else if (cos(dir) > 0) {
			ObjRender_SetAngleXYZ(bossObj,0,0,0);
			if(animFrame < 15) {ObjSprite2D_SetSourceRect(bossObj,0,0,64,64);} 
			if(animFrame >= 15 && animFrame < 30) {ObjSprite2D_SetSourceRect(bossObj,64,0,128,64);}
			if(animFrame >= 30) {ObjSprite2D_SetSourceRect(bossObj,128,0,192,64);}
			animFrame2= 0;
		}	
		animFrame++;
		animFrame2+=1;
		if(animFrame > 45) { animFrame = 0; }
		yield;
	}
	
}



task movement{
	wait (60);
	fire;
	wait (30);
	while (!Obj_IsDeleted(bossObj)) {
		
		ObjMove_SetDestAtSpeed(bossObj,192,130,2);
		wait(45);
		fire;
		wait(45);
		//ObjMove_SetDestAtSpeed(bossObj,292,130,2);
		wait(45);
		fire;
		wait(45);
		//ObjMove_SetDestAtSpeed(bossObj,92,130,2);
		wait(45);
		fire;
		wait(45);
		
	}
	
	
}

function angleToPlayer {
	let dir= atan2(GetPlayerY-bossY,GetPlayerX-bossX);
	return dir;
	
	
}
let angleT = 0;
let angleF = 0;
let speed = 0;
let crecent = 1;
let hydrogen = 0;
let oxygen = 120;
let water = 0;
let atom = 0;

task fire{
	let dir = angleToPlayer; 	// call function angleToPlayer, calculate the angle and store it inside dir
	
	
	
	loop(1){
		
		loop(5){
			CreateShotA2(bossX, bossY, 8, dir,-0.2,0, oxygen, 20);
			CreateShotA2(bossX, bossY, 8, dir,-0.2,0, oxygen, 10);
			CreateShotA2(bossX, bossY, 8, dir,-0.2,0, oxygen-2, 40);


			//angleF+=360/crecent;


			wait(9);
		}
	wait(0)
	}
	
	
	
	
	
}

task TEnd{
	// As long as enemy is alive, yield.
	while(ObjEnemy_GetInfo(bossObj, INFO_LIFE) > 0) {
		yield;
	}
	PlaySE(bossdeathSFX);
	TExplosionA(bossX,bossY,10,0.5);
	Obj_Delete(bossObj);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	wait(120);
	CloseScript(GetOwnScriptID());
	
	
}